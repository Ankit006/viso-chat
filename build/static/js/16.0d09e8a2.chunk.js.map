{"version":3,"sources":["img/send.svg","components/SendInput.js","components/ChatView.js","screens/PersonalChat.js"],"names":["SendInput","onChangeValue","value","sendMessage","className","type","onChange","src","send","alt","height","width","onClick","ChatView","message","RecivedUserId","id","messages","connect","state","userId","personalChatUserData","personalChatUser","username","profileImg","userProfileImg","accountId","userdata","history","useHistory","useState","setMessage","reciveMessage","setReciveMessage","status","setStatus","useEffect","push","socket","on","msg","prevState","from","emit","to","oldMessages","Array","off","style","backgroundColor","map","index","e","DOMPurify","sanitize","target","newMessages"],"mappings":"kJAAe,MAA0B,iC,OCE1B,SAASA,EAAT,GAA2D,IAAtCC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YACxD,OACE,qBAAKC,UAAU,OAAf,SACE,gCACE,uBAAOC,KAAK,OAAOC,SAAUL,EAAeC,MAAOA,IACnD,qBACEK,IAAKC,EACLC,IAAI,OACJC,OAAO,KACPC,MAAM,KACNC,QAAST,W,kGCAJU,MAVf,YAA+C,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,cAC3B,OACE,mCACE,mBAAGX,UAAWU,EAAQE,KAAOD,EAAgB,YAAc,OAA3D,SACE,qCAAQD,EAAQG,iB,2BCkGTC,uBAVf,SAAyBC,GACvB,MAAO,CAELC,OAAQD,EAAME,qBAAqBC,iBAAiBF,OACpDG,SAAUJ,EAAME,qBAAqBC,iBAAiBC,SACtDC,WAAYL,EAAME,qBAAqBC,iBAAiBG,eACxDC,UAAWP,EAAMQ,SAASP,UAIfF,EA/Ff,YAAoE,IAA5CE,EAA2C,EAA3CA,OAAQG,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,WAAYE,EAAa,EAAbA,UAC9CE,EAAUC,cADiD,EAEnCC,mBAAS,IAF0B,mBAE1DhB,EAF0D,KAEjDiB,EAFiD,OAGvBD,mBAAS,IAHc,mBAG1DE,EAH0D,KAG3CC,EAH2C,OAIrCH,mBAAS,IAJ4B,mBAI1DI,EAJ0D,KAIlDC,EAJkD,KAmDjE,OA9BAC,qBAAU,WAqBR,MApBe,KAAXhB,GACFQ,EAAQS,KAAK,KAEfC,IAAOC,GAAG,iBAAiB,SAACC,GAE1BP,GAAiB,SAACQ,GAAD,4BACZA,GADY,CAEf,CAAExB,SAAUuB,EAAI1B,QAASE,GAAIwB,EAAIE,cAGrCJ,IAAOK,KAAK,cAAe,CAAED,KAAMhB,EAAWkB,GAAIxB,IAClDkB,IAAOC,GAAG,eAAe,SAACC,GACxB,IAAIK,EAAcC,MAAMJ,KAAKF,GAC7BP,EAAiBY,MAGnBP,IAAOC,GAAG,gBAAgB,SAACC,GAAD,OAASL,EAAUK,EAAI1B,YAEjDwB,IAAOK,KAAK,WAAY,CAAEjB,YAAWN,WAE9B,WACLkB,IAAOK,KAAK,YAAa,CAAEjB,YAAWN,WACtCkB,IAAOS,IAAI,WACXT,IAAOS,IAAI,eACXT,IAAOS,IAAI,iBACXT,IAAOS,IAAI,mBAEZ,IAGD,qCACE,qBAAK3C,UAAU,eAAf,SACE,sBAAKA,UAAU,WAAf,UACE,gCACE,qBAAKG,IAAKiB,EAAYf,IAAI,gBAAgBC,OAAO,KAAKC,MAAM,OAC5D,qBACEqC,MAAO,CAAEC,gBAA4B,WAAXf,EAAsB,QAAU,YAG9D,4BAAIX,SAGR,qBAAKnB,UAAU,WAAf,SACG4B,EACGA,EAAckB,KAAI,SAACpC,EAASqC,GAAV,OAChB,cAAC,EAAD,CAEErC,QAASA,EACTC,cAAeK,EACfM,UAAWA,GAHNyB,MAMT,OAEN,cAACnD,EAAA,EAAD,CACEC,cAvEW,SAACmD,GAChBrB,EAAWsB,IAAUC,SAASF,EAAEG,OAAOrD,SAuEnCA,MAAOY,EACPX,YArEc,WAClBmC,IAAOK,KAAK,cAAe,CACzBD,KAAMhB,EACNZ,QAASA,EACT8B,GAAIxB,IAEN,IAAIoC,EAAW,sBAAOxB,GAAP,CAAsB,CAAEf,SAAUH,EAASE,GAAIU,KAC9DO,EAAiBuB,GACjBzB,EAAW","file":"static/js/16.0d09e8a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/send.57a49ec4.svg\";","import React from \"react\";\nimport send from \"../img/send.svg\";\nexport default function SendInput({ onChangeValue, value, sendMessage }) {\n  return (\n    <div className=\"send\">\n      <div>\n        <input type=\"text\" onChange={onChangeValue} value={value} />\n        <img\n          src={send}\n          alt=\"send\"\n          height=\"25\"\n          width=\"25\"\n          onClick={sendMessage}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction ChatView({ message, RecivedUserId }) {\n  return (\n    <>\n      <p className={message.id === RecivedUserId ? \"otherUser\" : \"user\"}>\n        <span> {message.messages}</span>\n      </p>\n    </>\n  );\n}\n\nexport default ChatView;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport socket from \"../modules/handleSocket\";\nimport ChatView from \"../components/ChatView\";\nimport SendInput from \"../components/SendInput\";\nimport DOMPurify from \"dompurify\";\n// logo\n\nfunction PersonalChat({ userId, username, profileImg, accountId }) {\n  const history = useHistory();\n  const [message, setMessage] = useState(\"\");\n  const [reciveMessage, setReciveMessage] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  const setChats = (e) => {\n    setMessage(DOMPurify.sanitize(e.target.value));\n  };\n\n  const sendMessage = () => {\n    socket.emit(\"sendMessage\", {\n      from: accountId,\n      message: message,\n      to: userId,\n    });\n    let newMessages = [...reciveMessage, { messages: message, id: accountId }];\n    setReciveMessage(newMessages);\n    setMessage(\"\");\n  };\n\n  useEffect(() => {\n    if (userId === \"\") {\n      history.push(\"/\");\n    }\n    socket.on(\"reciveMessage\", (msg) => {\n      // setReciveMessage(prevMessage);\n      setReciveMessage((prevState) => [\n        ...prevState,\n        { messages: msg.message, id: msg.from },\n      ]);\n    });\n    socket.emit(\"getMessages\", { from: accountId, to: userId });\n    socket.on(\"getMessages\", (msg) => {\n      let oldMessages = Array.from(msg);\n      setReciveMessage(oldMessages);\n    });\n\n    socket.on(\"isUserActive\", (msg) => setStatus(msg.message));\n\n    socket.emit(\"openChat\", { accountId, userId });\n\n    return () => {\n      socket.emit(\"closeChat\", { accountId, userId });\n      socket.off(\"message\");\n      socket.off(\"getMessages\");\n      socket.off(\"reciveMessage\");\n      socket.off(\"isUserActive\");\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"personalChat\">\n        <div className=\"userInfo\">\n          <div>\n            <img src={profileImg} alt=\"profile_image\" height=\"50\" width=\"50\" />\n            <div\n              style={{ backgroundColor: status === \"online\" ? \"green\" : \"red\" }}\n            ></div>\n          </div>\n          <p>{username}</p>\n        </div>\n      </div>\n      <div className=\"chatArea\">\n        {reciveMessage\n          ? reciveMessage.map((message, index) => (\n              <ChatView\n                key={index}\n                message={message}\n                RecivedUserId={userId}\n                accountId={accountId}\n              />\n            ))\n          : null}\n      </div>\n      <SendInput\n        onChangeValue={setChats}\n        value={message}\n        sendMessage={sendMessage}\n      />\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    // following user details\n    userId: state.personalChatUserData.personalChatUser.userId,\n    username: state.personalChatUserData.personalChatUser.username,\n    profileImg: state.personalChatUserData.personalChatUser.userProfileImg,\n    accountId: state.userdata.userId,\n  };\n}\n\nexport default connect(mapStateToProps)(PersonalChat);\n"],"sourceRoot":""}